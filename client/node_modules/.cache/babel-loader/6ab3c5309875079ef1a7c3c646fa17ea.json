{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\WTL\\\\Testdrive-Management-System\\\\client\\\\src\\\\components\\\\Manager.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport DataTable from 'react-data-table-component';\nimport Axios from 'axios';\nimport { ManagerNavBar } from \"./ManagerNavBar\";\nimport './styles/style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Manager = () => {\n  _s();\n  //Required functions and variables\n  const [testDriveList, setTestDriveList] = useState([]);\n\n  //On page refresh\n  useEffect(() => {\n    Axios.get(\"http://localhost:3005/testdrive/viewConfirmed\").then(response => {\n      if (response.data.length > 0) {\n        console.log(response);\n        setTestDriveList(response.data);\n      }\n    });\n  }, []);\n\n  //Confirmed testdrives functions-----------------------------------------\n\n  /*onst showConfirmedTD = ()=>{\r\n      Axios.get(\"http://localhost:3005/viewConfirmed\").then((response)=> {\r\n          if(response.data.length > 0){\r\n              console.log(response);\r\n              setTestDriveList(response.data);\r\n          }\r\n          else{\r\n              alert('No confirmed testdrives available');\r\n          }\r\n      });\r\n  };*/\n\n  const doneTestDrive = id => {\n    Axios.put(\"http://localhost:3005/testdrive/done\", {\n      tid: id\n    }).then(response => {\n      if (response.data.doneStatus == \"false\") {\n        alert(\"done failed!!\");\n      } else {\n        alert(\"Testdrive closed successfully!!\");\n      }\n    });\n  };\n\n  //Columns\n\n  const column_Confirmed = [{\n    name: 'Customer Name',\n    selector: row => row.name\n  }, {\n    name: 'Customer Address',\n    selector: row => row.addr\n  }, {\n    name: 'Customer MobNo',\n    selector: row => row.mobno\n  }, {\n    name: 'Booking Date',\n    selector: row => row.td_date\n  }, {\n    name: 'Time Slot',\n    selector: row => row.td_slot\n  }, {\n    name: 'Model',\n    selector: row => row.model\n  }, {\n    name: 'Transmission Type',\n    selector: row => row.type\n  }, {\n    name: 'Executive Name',\n    selector: row => row.exename\n  }, {\n    name: 'Executive MobNo',\n    selector: row => row.exemobno\n  }, {\n    name: 'Close',\n    cell: row => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        doneTestDrive(row.tid);\n      },\n      children: \"Done\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }, this)\n  }];\n\n  //-----------------------------------------------------------------------\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ManagerNavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile bck\",\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"head\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Confirmed Test-Drives\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 31\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n        columns: column_Confirmed,\n        data: testDriveList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n};\n_s(Manager, \"36ZyRP6qC/vWowUzKEJTa3bp/Bo=\");\n_c = Manager;\nvar _c;\n$RefreshReg$(_c, \"Manager\");","map":{"version":3,"names":["React","useEffect","useState","DataTable","Axios","ManagerNavBar","Manager","testDriveList","setTestDriveList","get","then","response","data","length","console","log","doneTestDrive","id","put","tid","doneStatus","alert","column_Confirmed","name","selector","row","addr","mobno","td_date","td_slot","model","type","exename","exemobno","cell"],"sources":["C:/Users/Admin/Desktop/WTL/Testdrive-Management-System/client/src/components/Manager.js"],"sourcesContent":["import React , {useEffect, useState} from 'react';\r\nimport DataTable from 'react-data-table-component';\r\nimport Axios from 'axios';\r\nimport {ManagerNavBar} from \"./ManagerNavBar\";\r\nimport './styles/style.css';\r\n\r\n\r\nexport const Manager = ()=> {\r\n\r\n    //Required functions and variables\r\n    const [testDriveList, setTestDriveList] = useState([]);\r\n\r\n\r\n    //On page refresh\r\n    useEffect(()=>{\r\n        Axios.get(\"http://localhost:3005/testdrive/viewConfirmed\").then((response)=> {\r\n            if(response.data.length > 0){\r\n                console.log(response);\r\n                setTestDriveList(response.data);\r\n            }\r\n        });\r\n    }, []);\r\n\r\n\r\n  \r\n\r\n    //Confirmed testdrives functions-----------------------------------------\r\n\r\n    /*onst showConfirmedTD = ()=>{\r\n        Axios.get(\"http://localhost:3005/viewConfirmed\").then((response)=> {\r\n            if(response.data.length > 0){\r\n                console.log(response);\r\n                setTestDriveList(response.data);\r\n            }\r\n            else{\r\n                alert('No confirmed testdrives available');\r\n            }\r\n        });\r\n    };*/\r\n\r\n    const doneTestDrive = (id)=>{\r\n        Axios.put(\"http://localhost:3005/testdrive/done\", \r\n        { tid : id\r\n        }).then((response)=> {\r\n                if(response.data.doneStatus == \"false\"){\r\n                    alert(\"done failed!!\");\r\n                }\r\n                else{\r\n                    alert(\"Testdrive closed successfully!!\");\r\n                }\r\n            }\r\n        );\r\n    };\r\n\r\n    //Columns\r\n\r\n    const column_Confirmed = [\r\n        {\r\n            name : 'Customer Name',\r\n            selector : (row) => row.name\r\n        },\r\n        {\r\n            name : 'Customer Address',\r\n            selector : (row) => row.addr\r\n        },\r\n        {\r\n            name : 'Customer MobNo',\r\n            selector : (row) => row.mobno\r\n        },\r\n        {\r\n            name : 'Booking Date',\r\n            selector : (row) => row.td_date\r\n        },\r\n        {\r\n            name : 'Time Slot',\r\n            selector : (row) => row.td_slot\r\n        },\r\n        {\r\n            name : 'Model',\r\n            selector : (row) => row.model\r\n        },\r\n        {\r\n            name : 'Transmission Type',\r\n            selector : (row) => row.type\r\n        },\r\n        {\r\n            name : 'Executive Name',\r\n            selector : (row) => row.exename\r\n        },\r\n        {\r\n            name : 'Executive MobNo',\r\n            selector : (row) => row.exemobno\r\n        },\r\n        {\r\n            name : 'Close',\r\n            cell : (row)=> (\r\n                <button onClick={()=> {doneTestDrive(row.tid)}}>Done</button>\r\n            )\r\n        }\r\n    ];\r\n\r\n\r\n\r\n\r\n    //-----------------------------------------------------------------------\r\n\r\n    return (\r\n        <div>\r\n            \r\n            {<ManagerNavBar/>}\r\n            \r\n            <div className='profile bck'>\r\n            <br></br>\r\n            <div class='head'><h2>Confirmed Test-Drives</h2></div>\r\n                <DataTable\r\n                    columns={ column_Confirmed }\r\n                    data = {testDriveList}\r\n                />\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}